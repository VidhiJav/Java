
/**
 *Efficient MArkovModel class. We create a hashMap which store key and arrayList 
 *of string following that key. And by doing so we can easily access following string's
 *Arraylist without generating every time. 
 * 
* @author (Vidhi Javiya)
 * @version (April 2019)
 */

import java.util.Random;
import java.util.*;
import edu.duke.*;

public class EfficientMarkovModel extends AbstractMarkovModel{
    private int num;
    HashMap <String,ArrayList<String>> map = new HashMap();

    public EfficientMarkovModel(int n) {
        myRandom = new Random();
        num =n;
    }

    public void setTraining(String s){
        myText = s.trim();
        //s = "yes-this-is-a-thin-pretty-pink-thistle";
        buildMap();
        printHashMapInfo();
    }

    private String getKey(int index) {
        return myText.substring(index,index+num);
    }

    private String getFollowingLetter(int index) {

        return myText.substring(index+num,index+(num+1));
    }

    private void buildMap() {
                  int pos =0;//order is num
                  int index =0;//position is index
        while (index < myText.length()-(num-1))  {

            String key = myText.substring(index,index+num);
           // String follow =myText.substring(index+key.length(),index+(key.length()+1));

            if (!map.containsKey(key) && index + num < myText.length()) {
               map.put(key,new ArrayList<String>(Arrays.asList(myText.substring(index+key.length(),index+(key.length()+1)))));
                         
            }

          else if(map.containsKey(key) && index + num < myText.length()){
                ArrayList<String> list = map.get(key);
                list.add(myText.substring(index+key.length(),index+(key.length()+1)));
                map.replace(key,list);
            }
        
            else if (index + num == myText.length()){
                map.put(key, new ArrayList<String>());
            }
            
           index++;
        }
        
        
    }

    public ArrayList<String> getFollows(String key) {
        return map.get(key);
    }

    public int mapSize() {
        return map.size();
    }

    public int longestFollowsSize() {
        int maxSize = 0;
        for (String key : map.keySet()) {
            maxSize = Math.max(maxSize, map.get(key).size());
        }

        return maxSize;
    }

   public void printHashMapInfo() {
        System.out.printf("Map size:\t%d\nMax size:\t%d\n", mapSize(), longestFollowsSize());
        // for (String key : map.keySet()) {
            // System.out.printf("Key:\t[%s]\tvalues: ", key);
            // System.out.println(map.get(key));
       // }

    }

   

    public String getRandomText(int numChars){
        // It should predict the next character, by finding all the 
        //characters that follow the current character in the 
        //training text, and then randomly picking one of them as
        //the next character.

        if (myText == null){
            return "";
        }
        StringBuilder sb = new StringBuilder();

        int index= myRandom.nextInt(myText.length()- num);
        String key = myText.substring(index,index+num);
        // System.out.println("key is  " +key);
        sb.append(key);
        for(int k=0; k < numChars-num; k++){

            ArrayList <String> follows = new ArrayList<String>();
            follows= getFollows(key);
            if(follows==null){break;}
            //System.out.println("key " + key+ "" + follows);
            index = myRandom.nextInt(follows.size());
            //System.out.println("out of follows index "+index);
            String next = follows.get(index);
            // System.out.println();
            sb.append(next);
            key= key.substring(1)+next;
        }
        return sb.toString();
    }

    public String toString() {
        return "EfficientMarkovModel of order " +num;
    }

}
    
    
    
    
    
    
