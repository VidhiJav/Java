
/**
 *The class MarkovRunnerWithInterface for running your program to generate random text. 
 * 
 * @author Duke Software
 * @version 1.0
 */

import edu.duke.*; 

public class MarkovRunnerWithInterface {
    public void runModel(IMarkovModel markov, String text, int size,int seed) {
        
        markov.setTraining(text);
        markov. setRandom(seed);
        System.out.println("running with " + markov);
        
        for(int k=0; k < 3; k++){
			String st= markov.getRandomText(size);
			printOut(st);
		}
    }
    
     public void testHashMap() {
        FileResource fr = new FileResource();
		String st = fr.asString();
		//String st = "yes-this-is-a-thin-pretty-pink-thistle";
		st = st.replace('\n', ' ');
		int size = 50;
		int seed = 531;
		int order = 5;
		EfficientMarkovModel ez = new EfficientMarkovModel(order);
		runModel(ez, st, size, seed);
		
    }
     
     public void compareMethod(){
         FileResource fr = new FileResource();
		String st = fr.asString();
		st = st.replace('\n', ' ');
		int size = 1000;
         MarkovModel mThree = new MarkovModel(2);
        runModel(mThree, st, size,42);
        long time1 = System.nanoTime();
        System.out.println(time1);
        EfficientMarkovModel ez = new EfficientMarkovModel(2);
	runModel(ez,st,size,42);
         long time2 = System.nanoTime();
        System.out.println(time2);
        System.out.println("efficency is "+time2  + "\n" + "model is"+time1 );
        }
    
    
    public void runMarkov() {
        FileResource fr = new FileResource();
		String st = fr.asString();
		st = st.replace('\n', ' ');
		int size = 50;
	//EfficientMarkovModel ez = new EfficientMarkovModel(2);
	//runModel(ez,st,size,42);
     //  MarkovZero mz = new MarkovZero();
      // runModel(mz, st, size);
    
       // MarkovOne mOne = new MarkovOne();
       // runModel(mOne, st, size,2);
        
       MarkovModel mThree = new MarkovModel(7);
       runModel(mThree, st, size,953);
        
       // MarkovFour mFour = new MarkovFour();
      
       //runModel(mFour, st, size,4);
  

    }

	private void printOut(String s){
		String[] words = s.split("\\s+");
		int psize = 0;
		System.out.println("----------------------------------");
		for(int k=0; k < words.length; k++){
			System.out.print(words[k]+ " ");
			psize += words[k].length() + 1;
			if (psize > 60) {
				System.out.println();
				psize = 0;
			}
		}
		System.out.println("\n----------------------------------");
	}
	
}
