import java.util.*;
import edu.duke.*;

public class EarthQuakeClient {
    public EarthQuakeClient() {
        // TODO Auto-generated constructor stub
    }

    public ArrayList<QuakeEntry> filterByMagnitude(ArrayList<QuakeEntry> quakeData,
    double magMin) {
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        for(QuakeEntry qe :quakeData ){
            if(qe.getMagnitude()>magMin){
                answer.add(qe);
            }

        }

        return answer;
    }

    public ArrayList<QuakeEntry>filterByDepth(ArrayList<QuakeEntry> quakeData,double
    minDepth,double maxDepth){
        ArrayList <QuakeEntry> answer = new ArrayList<QuakeEntry>();
        for(QuakeEntry qe:quakeData){
            double depth = qe.getDepth();
            if(depth <maxDepth && depth>minDepth){answer.add(qe);}

        }
        return answer;
    }

    public ArrayList<QuakeEntry> filterByDistanceFrom(ArrayList<QuakeEntry> quakeData,
    double distMax,
    Location from) {
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();

        //gothrough data find one thats close
        for(QuakeEntry qe:quakeData){

            double distance =qe.getLocation().distanceTo(from);
            double dis = distance/1000;
            if(dis<distMax)
                answer.add(qe);
            //System.out.println(distance);
        }
        return answer;
    }

    public ArrayList<QuakeEntry>filterByPhase(ArrayList<QuakeEntry>quakeData,String where,
    String phrase){
        ArrayList<QuakeEntry>answer= new ArrayList<QuakeEntry>();
        //Putting all words from phrase into ArrayList

        for(QuakeEntry qe:quakeData){
            String title = qe.getInfo();

            if (where=="any"){
                if(title.contains(phrase)){answer.add(qe);}

            }
            else if(where=="start"){
                if(title.startsWith(phrase)){answer.add(qe);}
            }

            else if(where=="end"){}

            if(title.endsWith(phrase)){answer.add(qe);
            }
        }

        return answer;

    }

    public void dumpCSV(ArrayList<QuakeEntry> list){
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                qe.getLocation().getLatitude(),
                qe.getLocation().getLongitude(),
                qe.getMagnitude(),
                qe.getInfo());
        }

    }

    public void QuakesOfDepth(){
        EarthQuakeParser parser =new EarthQuakeParser();
        String source ="data/nov20quakedata.atom";
        ArrayList<QuakeEntry> list =parser.read(source);
        System.out.println("read data for "+list.size()+ " quakes");
        ArrayList<QuakeEntry>ListQuakes = filterByDepth(list,-4000.0,-2000.00);
        for(QuakeEntry qe:ListQuakes){
            //System.out.println(qe);
        }
        System.out.println(ListQuakes.size() + " such quakes are registered");
    }

    public void bigQuakes() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "data/nov20quakedatasmall.atom";

        ArrayList<QuakeEntry> list  = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");
        ArrayList<QuakeEntry> ListBig = filterByMagnitude(list,5.0);

        for(QuakeEntry qe: ListBig){
            System.out.println(qe);
        }

    }

    public void quakesByPhase(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "data/nov20quakedata.atom";

        ArrayList<QuakeEntry> list  = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");
        ArrayList <QuakeEntry>ListQuakes = filterByPhase(list,"any","Can");
        for(QuakeEntry qe:ListQuakes){
            //System.out.println(qe);
        }
        System.out.println(ListQuakes.size() + " results are found.");
    } 

    public void closeToMe(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "data/nov20quakedatasmall.atom";
        //String source = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");

        // This location is Durham, NC
        // Location city = new Location(35.988, -78.907);

        // This location is Bridgeport, CA
        Location city =  new Location(38.17, -118.82);
        ArrayList<QuakeEntry> ListBigDis = filterByDistanceFrom(list,1000,city);
        for(QuakeEntry qe: ListBigDis)   {
            double dist = qe.getLocation().distanceTo(city)/1000;
            System.out.println(dist+qe.getInfo());

        }   
        System.out.println("Total result is " + ListBigDis.size());
    }

    public void createCSV(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "data/nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: " + list.size());
        for (QuakeEntry qe : list) {
            System.out.println(qe);
        }
    }

}
