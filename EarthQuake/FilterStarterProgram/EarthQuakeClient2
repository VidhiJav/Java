import java.util.*;
import edu.duke.*;

public class EarthQuakeClient2 {
    public EarthQuakeClient2() {
        // TODO Auto-generated constructor stub
        double minmag;
        double maxmag;
    }

    public ArrayList<QuakeEntry> filter(ArrayList<QuakeEntry> quakeData, Filter f) { 
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        for(QuakeEntry qe : quakeData) { 
            if (f.satisfies(qe)) { 
                answer.add(qe); 
            } 
        } 

        return answer;
    } 

    public void quakesWithFilter() { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "data/nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");

        // Filter f = new MinMagFilter(4.0); 
        //ArrayList<QuakeEntry> m7  = filter(list, f); 
        //for (QuakeEntry qe: m7) { 
        //  System.out.println(qe);
        //}
         Filter f = new MagnitudeFilter(3.5,4.5);
        ArrayList<QuakeEntry> mf = filter(list,f);
        Filter f1=new DepthFilter(-55000,-20000);
        ArrayList<QuakeEntry> df = filter(mf,f1);
        System.out.println(df.size() + " no of quakes");
        for(QuakeEntry qe: df){
           System.out.println(qe); 
        }
        //Location denver =  new Location(39.7392, -104.9903);

        //Filter f = new DistanceFilter(denver,1000);
        //ArrayList<QuakeEntry> dis =filter(list,f);
        //Filter f1 = new PhraseFilter("end",'a');
        //ArrayList<QuakeEntry> phrase = filter(dis,f1);
        //System.out.println(phrase.size() + " is no of quakes");
        //for(QuakeEntry qe: phrase){System.out.println(qe);}

        
    }

    public void createCSV() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "../data/nov20quakedata.atom";
        String source = "data/nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: "+list.size());
    }

    public  void testallMatchFilter(){

        EarthQuakeParser parser = new EarthQuakeParser();
       // String source = "../data/nov20quakedata.atom";
        String source = "data/nov20quakedata.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        //System.out.println(list.size() + "entries are there in list.");
        //for(QuakeEntry qe : list){
            //System.out.println(qe);
            
        //}

        MatchAllFilter maf =new MatchAllFilter();
        maf.addFilter(new MagnitudeFilter(1.0,4.0));
        maf.addFilter(new DepthFilter(-180000,-30000));
       // maf.addFilter(new PhraseFilter("any","a"));
        ArrayList <QuakeEntry> quakes = filter(list,maf);
        System.out.println("no of quakes "+quakes.size());
        for(QuakeEntry qe : quakes){System.out.println(qe);}
        
       // System.out.println("Filters used are  " +maf.getName());
        
    }

     public  void testallMatchFilter2(){

        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "../data/nov20quakedata.atom";
        String source = "data/nov20quakedata.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        System.out.println(list.size() + "entries are there in list.");
        for(QuakeEntry qe : list){
            //System.out.println(qe);
            
        }

        MatchAllFilter maf =new MatchAllFilter();
        Location loc = new Location(55.7308, 9.1153);
        maf.addFilter(new MagnitudeFilter(0.0,5.0));
        
        maf.addFilter(new DistanceFilter(loc,3000));
        maf.addFilter(new PhraseFilter("any",'e'));
        ArrayList <QuakeEntry> quakes = filter(list,maf);
        System.out.println(quakes.size()+"no of quakes");
        for(QuakeEntry qe : quakes){System.out.println(qe);}
    }
    public void dumpCSV(ArrayList<QuakeEntry> list) {
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                qe.getLocation().getLatitude(),
                qe.getLocation().getLongitude(),
                qe.getMagnitude(),
                qe.getInfo());
        }
    }

}
